{"ast":null,"code":"// export const numberWithCommas = (n, pointSizeDownFlag = true) => {\n// \t// var parts=n.toString().split(\".\");\n// \t// return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n// \tn = n + '';\n// \tvar parts = n.toString().split(\".\");\n// \tif (pointSizeDownFlag) {\n// \t\t// 소수점 영역 폰트 크기 줄임 \n// \t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".<sub>\" + parts[1] + \"</sub>\" : \"\");\n// \t} else {\n// \t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n// \t}\n// }\nexport const numberWithCommas = (n, pointSizeDownFlag = true, priceFlag = false) => {\n  // 1보다 작은 수는 소숫점 4자리까지 표현\n  if (n != 0 && n < 1 && n > 0) {\n    n = n.toFixed(4);\n  } else {\n    if (priceFlag) {\n      n = n.toFixed(2);\n    }\n  }\n\n  n = n + '';\n  var parts = n.toString().split(\".\");\n\n  if (pointSizeDownFlag) {\n    // 소수점 영역 폰트 크기 줄임 \n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".<sub>\" + parts[1] + \"</sub>\" : \"\");\n  } else {\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n  }\n};\n\nfunction capitalize2(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport function replaceAll(str, searchStr, replaceStr) {\n  return str.split(searchStr).join(replaceStr);\n}\nexport function getCurrencyUnit(amount) {\n  // Nine Zeroes for Billions\n  return Math.abs(Number(amount)) >= 1.0e+9 ? \"B\" // Six Zeroes for Millions \n  : Math.abs(Number(amount)) >= 1.0e+6 ? \"M\" // Three Zeroes for Thousands\n  : Math.abs(Number(amount)) >= 1.0e+3 ? \"K\" : \"\";\n}\nexport function getCurrencyUnitFullName(amount) {\n  // Nine Zeroes for Billions\n  return Math.abs(Number(amount)) >= 1.0e+9 ? \"Billion\" // Six Zeroes for Millions \n  : Math.abs(Number(amount)) >= 1.0e+6 ? \"Million\" // Three Zeroes for Thousands\n  : Math.abs(Number(amount)) >= 1.0e+3 ? \"Thousand\" : \"\";\n}\nexport function getCurrencyDigit(amount) {\n  // Nine Zeroes for Billions\n  return Math.abs(Number(amount)) >= 1.0e+9 ? 1000000000 // Six Zeroes for Millions \n  : Math.abs(Number(amount)) >= 1.0e+6 ? 1000000 // Three Zeroes for Thousands\n  : Math.abs(Number(amount)) >= 1.0e+3 ? 1000 : 1;\n}\nexport function textEllipsis(input) {\n  if (input.length > 83) {\n    return input.substring(0, 83) + ' ...';\n  }\n\n  return input;\n}\n;\nexport function convertDateFormat(date) {\n  // return date.toISOString().substring(0, 10);\n  var year = date.getFullYear();\n  var month = 1 + date.getMonth();\n  month = month >= 10 ? month : '0' + month;\n  var day = date.getDate();\n  day = day >= 10 ? day : '0' + day;\n  return year + '-' + month + '-' + day;\n}\n\nfunction fillZeros(n, digits) {\n  var zero = '';\n  n = n.toString();\n\n  if (n.length < digits) {\n    for (i = 0; i < digits - n.length; i++) zero += '0';\n  }\n\n  return zero + n;\n}\n\nexport function convertDateFormat2(d) {\n  var s = fillZeros(d.getFullYear(), 4) + '-' + fillZeros(d.getMonth() + 1, 2) + '-' + fillZeros(d.getDate(), 2) + ' ' + fillZeros(d.getHours(), 2) + ':' + fillZeros(d.getMinutes(), 2) + ':' + fillZeros(d.getSeconds(), 2);\n  return s;\n}\nexport function convertDateFormat3(date) {\n  // return date.toISOString().substring(0, 10);\n  // var year = date.getFullYear().toString().substr(-2);\n  var year = date.getFullYear().toString();\n  var month = 1 + date.getMonth();\n  month = month >= 10 ? month : '0' + month;\n  var day = date.getDate();\n  day = day >= 10 ? day : '0' + day;\n  return year + '.' + month + '.' + day;\n}\nexport function getOfficialDefiName(defiName) {\n  let convertedName;\n\n  switch (defiName) {\n    case \"pancake\":\n      convertedName = \"PancakeSwap\";\n      break;\n\n    case \"bscSwap\":\n      convertedName = \"BSCSwap\";\n      break;\n\n    case \"Cream Finance\":\n      convertedName = \"C.R.E.A.M. Finance\";\n      break;\n\n    case \"Bakery Swap\":\n      convertedName = \"BakerySwap\";\n      break;\n\n    case \"Narwhalswap\":\n      convertedName = \"NarwhalSwap\";\n      break;\n\n    case \"Stakecow\":\n      convertedName = \"MILK Protocol\";\n      break;\n\n    case \"STORMSWAP\":\n      convertedName = \"Storm Swap\";\n      break;\n\n    case \"BTC Standard Hashrate Token\":\n      convertedName = \"BTC Standard Hashrate\";\n      break;\n\n    case \"Wault.Finance\":\n      convertedName = \"Wault\";\n      break;\n\n    default:\n      convertedName = defiName;\n      break;\n  }\n\n  return convertedName;\n}\nexport function getOfficialCategoryName(category) {\n  let convertedName;\n\n  switch (category) {\n    case \"dex\":\n      convertedName = \"Spot Trading\";\n      break;\n\n    case \"farm\":\n      convertedName = \"Earn\";\n      break;\n\n    case \"YieldOptimization\":\n    case \"Yield Optimization\":\n      convertedName = \"Earn\";\n      break;\n\n    case \"lending\":\n      convertedName = \"Lending\";\n      break;\n\n    case \"Assets\":\n      convertedName = \"Assets\";\n      break;\n\n    case \"derivatives\":\n      convertedName = \"Derivatives\";\n      break;\n\n    case \"payments\":\n      convertedName = \"Payments\";\n      break;\n\n    case \"Content Sharing\":\n      convertedName = \"Content Sharing\";\n      break;\n\n    default:\n      convertedName = \"Misc\";\n      break;\n    // default:\n    //     convertedName = capitalize2(category);\n    //     break;                                                   \n  }\n\n  return convertedName;\n}\nexport function generateRandom(min, max) {\n  var ranNum = Math.floor(Math.random() * (max - min + 1)) + min;\n  return ranNum;\n} // 소숫점 2자리까지 강제 표현\n\nexport function convertToBMK(value) {\n  let digitForValue = getCurrencyDigit(value);\n  let currencyUnitForValue = getCurrencyUnit(value);\n  let valueNum = (value / digitForValue).toFixed(2);\n  let valueTag = valueNum + currencyUnitForValue;\n  return valueTag;\n}","map":{"version":3,"sources":["C:/Users/user/Documents/GitHub/watch/src/util/Util.js"],"names":["numberWithCommas","n","pointSizeDownFlag","priceFlag","toFixed","parts","toString","split","replace","capitalize2","str","charAt","toUpperCase","slice","capitalize","replaceAll","searchStr","replaceStr","join","getCurrencyUnit","amount","Math","abs","Number","getCurrencyUnitFullName","getCurrencyDigit","textEllipsis","input","length","substring","convertDateFormat","date","year","getFullYear","month","getMonth","day","getDate","fillZeros","digits","zero","i","convertDateFormat2","d","s","getHours","getMinutes","getSeconds","convertDateFormat3","getOfficialDefiName","defiName","convertedName","getOfficialCategoryName","category","generateRandom","min","max","ranNum","floor","random","convertToBMK","value","digitForValue","currencyUnitForValue","valueNum","valueTag"],"mappings":"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","sourcesContent":["// export const numberWithCommas = (n, pointSizeDownFlag = true) => {\n// \t// var parts=n.toString().split(\".\");\n// \t// return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n// \tn = n + '';\n// \tvar parts = n.toString().split(\".\");\n\n// \tif (pointSizeDownFlag) {\n// \t\t// 소수점 영역 폰트 크기 줄임 \n// \t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".<sub>\" + parts[1] + \"</sub>\" : \"\");\n// \t} else {\n// \t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n// \t}\n// }\n\nexport const numberWithCommas = (n, pointSizeDownFlag = true, priceFlag = false) => {\n    // 1보다 작은 수는 소숫점 4자리까지 표현\n    if (n != 0 && n < 1 && n > 0) {\n        n = (n).toFixed(4);\n    } else {\n        if (priceFlag) {\n            n = (n).toFixed(2);\n        }\n    }\n\n\tn = n + '';\n\tvar parts = n.toString().split(\".\");\n\n\tif (pointSizeDownFlag) {\n\t\t// 소수점 영역 폰트 크기 줄임 \n\t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".<sub>\" + parts[1] + \"</sub>\" : \"\");\n\t} else {\n\t\treturn parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n\t}\n}\n\nfunction capitalize2(str) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function capitalize(str) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function replaceAll(str, searchStr, replaceStr) {\n\treturn str.split(searchStr).join(replaceStr);\n}\n\nexport function getCurrencyUnit(amount) {\n    // Nine Zeroes for Billions\n    return Math.abs(Number(amount)) >= 1.0e+9\n    ? \"B\"\n    // Six Zeroes for Millions \n    : Math.abs(Number(amount)) >= 1.0e+6\n    ? \"M\"\n    // Three Zeroes for Thousands\n    : Math.abs(Number(amount)) >= 1.0e+3\n    ? \"K\"\n    : \"\";\n}\n\nexport function getCurrencyUnitFullName(amount) {\n    // Nine Zeroes for Billions\n    return Math.abs(Number(amount)) >= 1.0e+9\n    ? \"Billion\"\n    // Six Zeroes for Millions \n    : Math.abs(Number(amount)) >= 1.0e+6\n    ? \"Million\"\n    // Three Zeroes for Thousands\n    : Math.abs(Number(amount)) >= 1.0e+3\n    ? \"Thousand\"\n    : \"\";\n}\n\nexport function getCurrencyDigit(amount) {\n    // Nine Zeroes for Billions\n    return Math.abs(Number(amount)) >= 1.0e+9\n    ? 1000000000\n    // Six Zeroes for Millions \n    : Math.abs(Number(amount)) >= 1.0e+6\n    ? 1000000\n    // Three Zeroes for Thousands\n    : Math.abs(Number(amount)) >= 1.0e+3\n\t? 1000\n\t: 1;\n}\n\nexport function textEllipsis(input) {\n    if (input.length > 83) {\n       return input.substring(0, 83) + ' ...';\n    }\n    return input;\n};\n\nexport function convertDateFormat(date) {\n    // return date.toISOString().substring(0, 10);\n    var year = date.getFullYear();\n    var month = (1 + date.getMonth());\n    month = month >= 10 ? month : '0' + month;\n    var day = date.getDate();\n    day = day >= 10 ? day : '0' + day;\n    return year + '-' + month + '-' + day;\n}\n\nfunction fillZeros(n, digits) {  \n    var zero = '';  \n    n = n.toString();  \n\n    if (n.length < digits) {  \n        for (i = 0; i < digits - n.length; i++)  \n            zero += '0';  \n    }  \n    return zero + n;  \n}\n\nexport function convertDateFormat2(d) {\n    var s = fillZeros(d.getFullYear(), 4) + '-' +  \n            fillZeros(d.getMonth() + 1, 2) + '-' +  \n            fillZeros(d.getDate(), 2) + ' ' +  \n      \n            fillZeros(d.getHours(), 2) + ':' +  \n            fillZeros(d.getMinutes(), 2) + ':' +  \n            fillZeros(d.getSeconds(), 2);  \n\n    return s;  \n}\n\nexport function convertDateFormat3(date) {\n    // return date.toISOString().substring(0, 10);\n    // var year = date.getFullYear().toString().substr(-2);\n    var year = date.getFullYear().toString();\n    var month = (1 + date.getMonth());\n    month = month >= 10 ? month : '0' + month;\n    var day = date.getDate();\n    day = day >= 10 ? day : '0' + day;\n    return year + '.' + month + '.' + day;\n}\n\nexport function getOfficialDefiName(defiName) {\n    let convertedName;\n    switch (defiName) {\n        case \"pancake\":\n            convertedName = \"PancakeSwap\";\n            break;\n        case \"bscSwap\":\n            convertedName = \"BSCSwap\";\n            break;\n        case \"Cream Finance\":\n            convertedName = \"C.R.E.A.M. Finance\";\n            break;\n        case \"Bakery Swap\":\n            convertedName = \"BakerySwap\";\n            break;\n        case \"Narwhalswap\":\n            convertedName = \"NarwhalSwap\";\n            break;\n        case \"Stakecow\":\n            convertedName = \"MILK Protocol\";\n            break;  \n        case \"STORMSWAP\":\n            convertedName = \"Storm Swap\";\n            break;\n        case \"BTC Standard Hashrate Token\":\n            convertedName = \"BTC Standard Hashrate\";\n            break;  \n        case \"Wault.Finance\":\n            convertedName = \"Wault\";\n            break;\n        default:\n            convertedName = defiName;\n            break;                                                   \n    }\n    return convertedName;\n}\n\nexport function getOfficialCategoryName(category) {\n    let convertedName;\n    switch (category) {\n        case \"dex\":\n            convertedName = \"Spot Trading\";\n            break;\n        case \"farm\":\n            convertedName = \"Earn\";\n            break;\n        case \"YieldOptimization\":\n        case \"Yield Optimization\":    \n            convertedName = \"Earn\";\n            break;  \n        case \"lending\":\n            convertedName = \"Lending\";\n            break;      \n        case \"Assets\":\n            convertedName = \"Assets\";\n            break;    \n        case \"derivatives\":\n            convertedName = \"Derivatives\";\n            break;        \n        case \"payments\":\n            convertedName = \"Payments\";\n            break;     \n        case \"Content Sharing\":\n            convertedName = \"Content Sharing\";\n            break;          \n        default:\n            convertedName = \"Misc\";\n            break;                    \n        // default:\n        //     convertedName = capitalize2(category);\n        //     break;                                                   \n    }\n    return convertedName;\n}\n\nexport function generateRandom(min, max) {\n    var ranNum = Math.floor(Math.random()*(max-min+1)) + min;\n    return ranNum;\n}\n\n// 소숫점 2자리까지 강제 표현\nexport function convertToBMK(value) {\n    let digitForValue = getCurrencyDigit(value);\n    let currencyUnitForValue = getCurrencyUnit(value);\n    let valueNum = (value / digitForValue).toFixed(2);\n    let valueTag = valueNum + currencyUnitForValue;\n    return valueTag;\n}\n\n"]},"metadata":{},"sourceType":"module"}